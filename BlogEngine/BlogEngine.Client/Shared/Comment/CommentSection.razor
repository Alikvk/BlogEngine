@inject ICommentClient CommentClient

<CommentCreateForm BlogID="BlogID"
                   ValidSubmit="OnValidSubmit"
                   CommentToReply="_commentToReply"
                   CancelReply="OnCancelReply"
                   WrapperCss="my-4" />

<GenericList Collection="_mainCommentDTOs">
    <EmptyTemplateFragment>
        <TextCenter Text="Comments not available" />
    </EmptyTemplateFragment>

    <WholeCollectionTemplate>

        <!-- Comments -->
        @foreach (var mainCommentDTO in _mainCommentDTOs)
        {
            <IndividualComment MainCommentDTO="mainCommentDTO"
                               CommentClickedForReply="OnCommentClickedForReply"
                               CommentClickedForUpdate="OnCommentClickedForUpdate"
                               MainCommentDelete="OnMainCommentDelete"
                               SubCommentDelete="OnSubCommentDelete"
                               MainCommentWrapperCss="media mb-4 d-flex align-items-start text-break"
                               SubCommentWrapperCss="media mt-4 d-flex align-items-start text-break" />
        }

    </WholeCollectionTemplate>
</GenericList>

<ConfirmationModal @ref="_commentUpdateModal"
                   Confirm="(()=>_commentUpdateModal.Hide())"
                   Cancel="OnCancelUpdate"
                   Centered="true"
                   WithoutButtons="true"
                   ModalTitle="Update comment">
    <ModalBodyTemplate>

        @if (_commentToUpdate != null)
        {
            <CommentUpdateForm @ref="_commentUpdateForm"
                               ValidSubmit="OnCommentUpdateValidSubmit"
                               CommentUpdateDTO="_commentToUpdate" />
        }

    </ModalBodyTemplate>
</ConfirmationModal>


<ConfirmationModal @ref="_confirmationModal"
                   Confirm="(() => _confirmationModal.Hide())"
                   ConfirmOnly="true">
    <ModalBodyTemplate>
        Login to comment
    </ModalBodyTemplate>
</ConfirmationModal>

@code{
    [Parameter] public int BlogID { get; set; }
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private ConfirmationModal _confirmationModal;
    private ConfirmationModal _commentUpdateModal;
    private CommentUpdateForm _commentUpdateForm;

    private List<MainCommentDTO> _mainCommentDTOs;

    private MainCommentDTO _commentToReply;
    private CommentUpdateDTO _commentToUpdate;

    protected override async Task OnInitializedAsync()
    {
        await LoadComponent();
    }

    private async Task LoadComponent()
    {
        _mainCommentDTOs = await CommentClient.GetMainCommentsByBlogIdAsync(BlogID);
    }

    private async Task OnValidSubmit(CommentCreationDTO commentCreationDTO)
    {
        var isAuthenticated = (await AuthenticationStateTask).User.Identity.IsAuthenticated;

        if (!isAuthenticated)
        {
            _confirmationModal.Show();
            _commentToReply = null;
            return;
        }

        if (commentCreationDTO.IsMain) await CommentClient.InsertMainCommentAsync(commentCreationDTO);
        else await CommentClient.InsertSubCommentAsync(commentCreationDTO);

        _commentToReply = null;

        await LoadComponent();
    }

    private void OnCommentClickedForReply(MainCommentDTO mainCommentDTO)
    {
        _commentToReply = mainCommentDTO;
    }

    private void OnCancelReply()
    {
        _commentToReply = null;
    }

    private void OnCommentClickedForUpdate(CommentUpdateDTO commentUpdateDTO)
    {
        _commentToUpdate = commentUpdateDTO;
        _commentUpdateModal.Show();
    }

    private void OnCancelUpdate()
    {
        _commentUpdateModal.Hide();
        _commentToUpdate = default;
    }

    private async Task OnCommentUpdateValidSubmit(CommentUpdateDTO commentUpdateDTO)
    {
        var updateResult = await CommentClient.UpdateCommentAsync(commentUpdateDTO);

        if (!updateResult)
        {
            _commentUpdateForm.ShowErrorMessage = true;
            return;
        }

        commentUpdateDTO = default;
        _commentUpdateModal.Hide();

        await LoadComponent();
    }

    private async Task OnMainCommentDelete(int id)
    {
        if (_commentToReply?.ID == id)
        {
            _commentToReply = null;
        }

        await CommentClient.DeleteMainCommentAsync(id);

        await LoadComponent();
    }

    private async Task OnSubCommentDelete(int id)
    {
        if (_commentToReply?.ID == id)
        {
            _commentToReply = null;
        }

        await CommentClient.DeleteSubCommentAsync(id);

        await LoadComponent();
    }
}