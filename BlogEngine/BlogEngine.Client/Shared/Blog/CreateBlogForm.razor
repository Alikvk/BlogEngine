<EditForm Model="_blogCreationDTO"
          OnValidSubmit="DataAnnotationsValidated"
          class="d-flex justify-content-center align-items-center flex-column">
    <DataAnnotationsValidator />

    <div class="form-group w-50 my-2">
        <label class="form-label" for="title">Title</label>
        <input @bind-value="_blogCreationDTO.Title" type="text" class="form-control" id="title">
        <ValidationMessage For="(() => _blogCreationDTO.Title)" />
    </div>

    <div class="form-group w-50 my-2">
        <label class="form-label" for="short-description">Short Description</label>
        <textarea @bind="_blogCreationDTO.ShortDescription" class="form-control" id="short-description" />
        <ValidationMessage For="(() => _blogCreationDTO.ShortDescription)" />
    </div>

    <InputImage Image="_blogCreationDTO.Cover"
                LabelText="Choose Cover"
                ImageSelected="OnImageSelected"
                ImageRemoved="OnImageRemoved"
                WrapperCssClass="form-group w-50 my-2" />

    <div class="control-section w-50 my-2">
        <label class="form-label" for="blog-content">Blog Content</label>
        <SfRichTextEditor @bind-Value="_blogCreationDTO.HTMLContent" ShowCharCount="true" MaxLength="2000">
            <ChildContent>
                <RichTextEditorToolbarSettings Items="GetRichTextEditorTools()" />
            </ChildContent>
        </SfRichTextEditor>
        <ValidationMessage For="(() => _blogCreationDTO.HTMLContent)" />
    </div>

    <button type="submit" class="btn btn-success" disabled="@_actionsDisabled">Submit</button>
</EditForm>

@code{
    // TODO : Add publish date picker
    private BlogCreationDTO _blogCreationDTO = new BlogCreationDTO();
    [Parameter] public EventCallback<BlogCreationDTO> ValidSubmit { get; set; }

    private bool _actionsDisabled = false;

    private async Task DataAnnotationsValidated()
    {
        _actionsDisabled = true;
        StateHasChanged();

        await ValidSubmit.InvokeAsync(_blogCreationDTO);
    }

    private void OnImageSelected(byte[] imageBytes)
    {
        _blogCreationDTO.Cover = imageBytes;
    }

    private void OnImageRemoved()
    {
        _blogCreationDTO.Cover = null;
    }

    private object[] GetRichTextEditorTools()
    {
        return new object[] {
        "Bold", "Italic", "Underline", "|",
        "Formats", "Alignments", "OrderedList", "UnorderedList", "|",
        "CreateLink", "Image", "|","SourceCode", "|", "Undo", "Redo" };
    }
}