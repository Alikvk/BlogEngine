@inject NavigationManager NavigationManager

<SfGrid DataSource="@Blogs" AllowPaging="true">
    <GridColumns>
        <GridColumn Field=@nameof(BlogModel.ID) HeaderText="ID" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(BlogModel.Title) HeaderText="Title" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(BlogModel.DateCreated) HeaderText="Date Created" Type="ColumnType.Date" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(BlogModel.LastUpdateBy) HeaderText="Date Updated" Type="ColumnType.Date" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(BlogModel.Cover) HeaderText="Has A Cover Image" Type="ColumnType.Date" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var blogModel = context as BlogModel;
                    @if (blogModel.Cover != null)
                    {
                        <div>Yes</div>
                    }
                    else
                    {
                        <div>No</div>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderText="Actions" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var blogModel = context as BlogModel;
                    string editLink = $"/blog/edit/{blogModel.ID}/{blogModel.Title}";

                    <SfButton @onclick="(() => NavigationManager.NavigateTo(editLink))" CssClass="e-warning e-small">Edit</SfButton>
                    <SfButton OnClick="(() => OnDeleteButtonClick(blogModel))" CssClass="e-danger e-small">Delete</SfButton>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @bind-Visible="@deleteDialogVisible" IsModal="true" Width="400px" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            Blog Delete
        </Header>
        <Content>
            Are you sure you want to permanently delete blog: @_blogToDelete?.Title ?
        </Content>
    </DialogTemplates>
    <DialogEvents Closed="DeleteCanceled"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="Yes" IsPrimary="true" OnClick="DeleteConfirmed" />
        <DialogButton Content="No" OnClick="@DeleteCanceled" />
    </DialogButtons>
    <DialogPositionData X="center" Y="center" />
</SfDialog>

@code{
    [Parameter] public List<BlogModel> Blogs { get; set; }
    [Parameter] public EventCallback<int> BlogDelete { get; set; }

    private bool deleteDialogVisible = false;
    private BlogModel _blogToDelete = null;

    private void OnDeleteButtonClick(BlogModel blogModel)
    {
        _blogToDelete = blogModel;
        deleteDialogVisible = true;
    }

    private async Task DeleteConfirmed()
    {
        await BlogDelete.InvokeAsync(_blogToDelete.ID);
        deleteDialogVisible = false;
    }

    private void DeleteCanceled() => deleteDialogVisible = false;
}