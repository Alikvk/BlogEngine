<div class="container">
    <EditForm Model="BlogEditPageDTO.BlogUpdateDTO" OnValidSubmit="DataAnnotationsValidated"
              class="d-flex justify-content-center align-items-center flex-column">
        <DataAnnotationsValidator />

        <div class="form-group w-50 my-2">
            <label class="form-label" for="title">Title</label>
            <input @bind-value="BlogEditPageDTO.BlogUpdateDTO.Title" type="text" class="form-control" id="title">
            <ValidationMessage For="(() => BlogEditPageDTO.BlogUpdateDTO.Title)" />
        </div>

        <div class="form-group w-50 my-2">
            <label class="form-label" for="short-description">Short Description</label>
            <textarea @bind="BlogEditPageDTO.BlogUpdateDTO.ShortDescription" class="form-control" id="short-description" />
            <ValidationMessage For="(() => BlogEditPageDTO.BlogUpdateDTO.ShortDescription)" />
        </div>

        <InputImage Image="BlogEditPageDTO.BlogUpdateDTO.Cover"
                    LabelText="Choose Cover"
                    ImageSelected="OnImageSelected"
                    ImageRemoved="OnImageRemoved"
                    WrapperCssClass="form-group w-50 my-2" />

        <div class="w-50 my-2">
            <label class="form-label" for="category-selector">Select Categories</label>
            <SfMultiSelect ID="category-selector" @bind-Value="_selectedCategoryIDs" DataSource="BlogEditPageDTO.AllCategoryDTOs" AllowFiltering="true">
                <MultiSelectFieldSettings Text="Name" Value="ID"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>

        <div class="control-section w-50 my-2">
            <label class="form-label" for="blog-content">Blog Content</label>
            <SfRichTextEditor @bind-Value="BlogEditPageDTO.BlogUpdateDTO.HTMLContent" ShowCharCount="true" MaxLength="2000">
                <ChildContent>
                    <RichTextEditorToolbarSettings Items="GetRichTextEditorTools()" />
                </ChildContent>
            </SfRichTextEditor>
            <ValidationMessage For="(() => BlogEditPageDTO.BlogUpdateDTO.HTMLContent)" />
        </div>

        <button type="submit" class="btn btn-success my-2" disabled="@_actionsDisabled">Submit</button>
    </EditForm>
</div>

@code{
    [Parameter] public BlogEditPageDTO BlogEditPageDTO { get; set; }
    [Parameter] public EventCallback ValidSubmit { get; set; }

    private int[] _selectedCategoryIDs = new int[] { };
    private bool _actionsDisabled = false;

    protected override void OnInitialized()
    {
        if (BlogEditPageDTO != null)
        {
            _selectedCategoryIDs = BlogEditPageDTO.BlogUpdateDTO.CategoryIDs.ToArray();
        }
    }

    private async Task DataAnnotationsValidated()
    {
        _actionsDisabled = true;
        StateHasChanged();

        BlogEditPageDTO.BlogUpdateDTO.CategoryIDs = _selectedCategoryIDs != null ? _selectedCategoryIDs.ToList() : new List<int>();

        await ValidSubmit.InvokeAsync(default);
    }

    private void OnImageSelected(byte[] imageBytes)
    {
        BlogEditPageDTO.BlogUpdateDTO.Cover = imageBytes;
    }

    private void OnImageRemoved()
    {
        BlogEditPageDTO.BlogUpdateDTO.Cover = null;
    }

    private object[] GetRichTextEditorTools()
    {
        return new object[] {
        "Bold", "Italic", "Underline", "|",
        "Formats", "Alignments", "OrderedList", "UnorderedList", "|",
        "CreateLink", "Image", "|","SourceCode", "|", "Undo", "Redo" };
    }
}