<style>
    body {
        background-color: #f7f9fb !important;
    }
</style>

<div class="container d-flex align-items-center flex-column">
    <EditForm Model="_userRegisterDTO" OnValidSubmit="DataAnnotationsValidated" class="shadow p-3 mb-5 bg-white rounded account-form">
        <DataAnnotationsValidator />

        <h3 class="mb-3">Register</h3>

        <div class="mb-3">
            <label for="first-name" class="form-label">First Name</label>
            <input @bind-value="_userRegisterDTO.FirstName" type="text" id="first-name" class="form-control">
            <ValidationMessage For="(() => _userRegisterDTO.FirstName)" />
        </div>

        <div class="mb-3">
            <label for="last-name" class="form-label">Last Name</label>
            <input @bind-value="_userRegisterDTO.LastName" type="text" id="last-name" class="form-control">
            <ValidationMessage For="(() => _userRegisterDTO.LastName)" />
        </div>

        <InputImage Image="_userRegisterDTO.ProfilePicture"
                    LabelText="Choose Profile Picture"
                    ImageSelected="((imageBytes) => _userRegisterDTO.ProfilePicture = imageBytes)"
                    ImageRemoved="(() => _userRegisterDTO.ProfilePicture = null)"
                    WrapperCssClass="mb-3" />

        <div class="mb-3">
            <label for="r-email" class="form-label">E-Mail Address</label>
            <input @bind-value="_userRegisterDTO.EmailAddress" autocomplete="new-email"
                   type="email" id="r-email" class="form-control">
            <ValidationMessage For="(() => _userRegisterDTO.EmailAddress)" />
        </div>

        <div class="mb-3">
            <label for="r-password" class="form-label">Password</label>
            <input @bind-value="_userRegisterDTO.Password" autocomplete="new-password"
                   type="password" id="r-password" class="form-control">
            <ValidationMessage For="(() => _userRegisterDTO.Password)" />
        </div>

        <div class="mb-3">
            <label for="confirm-password" class="form-label">Confirm Password</label>
            <input @bind-value="_userRegisterDTO.ConfirmPassword" autocomplete="new-password"
                   type="password" id="confirm-password" class="form-control">
            <ValidationMessage For="(() => _userRegisterDTO.ConfirmPassword)" />
        </div>

        @if (ShowIncorrectCredentials)
        {
            <div class="validation-message">Credentials are invalid</div>
        }

        <button disabled="@(ShowIncorrectCredentials ? false : _actionsDisabled)" type="submit" class="btn btn-success mb-3 w-100">Register</button>

        <div class="text-center">
            <p>Already have an account? <a href="account/login" class="text-decoration-none">Login</a> </p>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public EventCallback<UserRegisterDTO> ValidSubmit { get; set; }
    public bool ShowIncorrectCredentials { get; set; }

    private UserRegisterDTO _userRegisterDTO = new UserRegisterDTO();
    private bool _actionsDisabled = false;

    private async Task DataAnnotationsValidated()
    {
        _actionsDisabled = true;
        StateHasChanged();

        await ValidSubmit.InvokeAsync(_userRegisterDTO);
    }
}