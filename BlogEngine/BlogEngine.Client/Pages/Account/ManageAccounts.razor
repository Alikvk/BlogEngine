@page "/accounts/manage"
@layout BrandOnlyLayout
@inject IAccountClient AccountClient
@attribute [Authorize(Roles = UserRole.Admin)]

<TextCenter Text="Manage Accounts" />

<AccountsDataGrid UserInfoDetailDTOs="_userInfoDetailDTOs"
                  UserDelete="OnUserDelete"
                  UserAssignAdminRole="OnUserAssignAdminRole"
                  UserRemoveAdminRole="OnUserRemoveAdminRole" />

<ConfirmationModal @ref="_deleteConfirmationModal"
                   Confirm="OnDeleteModalConfirm"
                   Cancel="OnDeleteModalCancel"
                   Centered="true">
    <ModalBodyTemplate>
        <p>Do you want to permanently delete User with Email Adress : @_userToDelete.EmailAddress ?</p>
    </ModalBodyTemplate>
</ConfirmationModal>

<ConfirmationModal @ref="_assignRoleConfirmationModal"
                   Confirm="OnUserAssignAdminRoleModalConfirm"
                   Cancel="OnUserAssignAdminRoleModalCancel"
                   Centered="true">
    <ModalBodyTemplate>
        <p>Do you want to Assign ADMIN ROLE to User with Email Adress : @_userToAssignRole.EmailAddress ?</p>
    </ModalBodyTemplate>
</ConfirmationModal>

@code{
    private List<UserInfoDetailDTO> _userInfoDetailDTOs;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }

    private async Task LoadPage()
    {
        _userInfoDetailDTOs = await AccountClient.GetUserInfoDetailDTOsAsync();
    }

    #region Delete

    private ConfirmationModal _deleteConfirmationModal;
    private UserInfoDetailDTO _userToDelete = null;

    private void OnUserDelete(UserInfoDetailDTO userInfoDetailDTO)
    {
        _userToDelete = userInfoDetailDTO;

        _deleteConfirmationModal.Show();
    }

    public async Task OnDeleteModalConfirm()
    {
        await AccountClient.DeleteUserAsync(_userToDelete.ID);
        _userToDelete = null;

        _deleteConfirmationModal.Hide();
        await LoadPage();
    }

    public void OnDeleteModalCancel()
    {
        _userToDelete = null;
        _deleteConfirmationModal.Hide();
    }

    #endregion

    #region Role Assign/Remove

    private ConfirmationModal _assignRoleConfirmationModal;
    private UserInfoDetailDTO _userToAssignRole = null;

    private void OnUserAssignAdminRole(UserInfoDetailDTO userInfoDetailDTO)
    {
        _userToAssignRole = userInfoDetailDTO;

        _assignRoleConfirmationModal.Show();
    }

    public async Task OnUserAssignAdminRoleModalConfirm()
    {
        var userRoleDTO = new UserRoleDTO()
        {
            UserID = _userToAssignRole.ID,
            RoleName = UserRole.Admin
        };

        await AccountClient.AssignRoleAsync(userRoleDTO);

        _userToAssignRole = null;

        _assignRoleConfirmationModal.Hide();
        await LoadPage();
    }

    public void OnUserAssignAdminRoleModalCancel()
    {
        _userToAssignRole = null;
        _assignRoleConfirmationModal.Hide();
    }

    public async Task OnUserRemoveAdminRole(UserInfoDetailDTO userInfoDetailDTO)
    {
        var userRoleDTO = new UserRoleDTO()
        {
            UserID = userInfoDetailDTO.ID,
            RoleName = UserRole.Admin
        };

        await AccountClient.RemoveRoleAsync(userRoleDTO);

        await LoadPage();
    }

    #endregion
}