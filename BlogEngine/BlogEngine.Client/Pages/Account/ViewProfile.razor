@page "/account/view/{ID:int}"
@page "/account/view/{ID:int}/{Name}"
@inject IAccountClient AccountClient
@inject IBlogClient BlogClient

@if (_userProfileDTO == null)
{
    <Loading />
}
else
{
    <div class="text-center">
        @if (_userProfileDTO.ProfilePicture is null)
        {
            <img class="user-profile-picture my-3" style="width: 300px; height:300px;"
                 src="css/Images/user_template_128px.png" alt="user icon">
        }
        else
        {
            <img class="user-profile-picture my-3" style="width: 300px; height:300px;"
                 src="data:image/jpeg;base64,@(Convert.ToBase64String(_userProfileDTO.ProfilePicture))">
        }
        <h3>First Name: @_userProfileDTO.FullName</h3>
        <span class="badge rounded-pill bg-success">Member</span>
        @if (_userProfileDTO.Roles.Any())
        {
            foreach (var role in _userProfileDTO.Roles)
            {
                <span class="badge rounded-pill bg-success">@role</span>
            }
        }

        <br>

        @if (articlesLoaded)
        {
            @if (_blogDTOs == null)
            {
                <Loading />
            }
            else if (!_blogDTOs.Any())
            {
                <h3>Articles not available</h3>
            }
            else
            {
                <BlogPostList BlogDTOs="_blogDTOs" />
            }
        }
        else
        {
            <a @onclick="LoadArticles" class="mt-2 btn btn-primary">Load all articles by @_userProfileDTO.FirstName</a>
        }
    </div>
}

@code {
    [Parameter] public int ID { get; set; }
    [Parameter] public string Name { get; set; }
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private UserProfileDTO _userProfileDTO;
    private List<BlogDTO> _blogDTOs;
    private bool _loggedUserEqualProfile = false;

    protected override async Task OnInitializedAsync()
    {
        _userProfileDTO = await AccountClient.GetUserProfileDTOAsync(ID);
        //_loggedUserEqualProfile = await LoggedUserIsEqualToProfile();
    }

    bool articlesLoaded;
    private async Task LoadArticles()
    {
        _blogDTOs = await BlogClient.GetAllByUserIdAsync(ID);
        articlesLoaded = true;
    }

    // Added for future use
    private async Task<bool> LoggedUserIsEqualToProfile()
    {
        var authenticationState = await AuthenticationStateTask;

        if (authenticationState == null) return false;

        var loggedUserEmail = authenticationState.GetClaimValue(ClaimTypes.Email);

        if (loggedUserEmail == null) return false;

        return _userProfileDTO.EmailAddress.Equals(loggedUserEmail);
    }
}