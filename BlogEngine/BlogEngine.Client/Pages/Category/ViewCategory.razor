@page "/category/view/{ID:int}"
@page "/category/view/{ID:int}/{Name}"
@inject ICategoryClient CategoryClient

<TextCenter Text="Page is under construction" />

@if (_categoryDTO == null)
{
    <Loading />
}
else
{
    <div class="text-center">

        @if (_categoryDTO.GeneralCover is null)
        {
            <img class="w-50" src="css/Images/image_not_available_template.png">
        }
        else
        {
            <img class="w-50" src="data:image/jpeg;base64,@(Convert.ToBase64String(_categoryDTO.GeneralCover))">
        }

        <div class="my-4">
            <h1 class="my-2">@_categoryDTO.Name</h1>
            <h3> Author is @_categoryDTO.CreatedBy</h3>
            <h3>Last updated by @_categoryDTO.LastUpdateBy <span class="half-font-size">(@_categoryDTO.LastUpdateDate.Value.GetRelativeTime() ago)</span></h3>
            <a href="blog/search/@_categoryDTO.ID" class="btn btn-primary">Blogs With '@_categoryDTO.Name' Category</a>
        </div>
    </div>
}

@code{
    [Parameter] public int ID { get; set; }
    [Parameter] public string Name { get; set; }

    private CategoryDTO _categoryDTO { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _categoryDTO = await CategoryClient.GetAsync(ID);
    }
}