@page "/blog/view/{ID:int}"
@page "/blog/view/{ID:int}/{Title}"
@inject IBlogClient BlogClient
@inject IBlogRatingClient BlogRatingClient

@if (_blogDTO == null)
{
    <Loading />
}
else
{
    <!-- Title -->
    <h1 class="mt-4">@_blogDTO.Title</h1>

    <!-- Author -->
    <p class="lead">by<a href="account/view/@_blogDTO.ApplicationUserID/@_blogDTO.CreatedBy">@_blogDTO.CreatedBy</a></p>
    <p>
        Average Rating : @_blogDTO.AverageRating.ToString("0.#")/5 |
        Vote :
        <RatingComponent Selected="_blogDTO.RatingByUser" Maximum="5" RatingSelected="OnRatingSelected" />
    </p>
    <hr>

    <!-- Date/Time -->
    <p>
        Posted on
        @_blogDTO.DateCreated.Value.ToString("MMMM")
        @_blogDTO.DateCreated.Value.Month,
        @_blogDTO.DateCreated.Value.Month at
        @_blogDTO.DateCreated.Value.ToString("HH:mm")
    </p>

    <hr>

    <!-- Preview Image -->

    @if (_blogDTO.Cover == null)
    {
        <img class="img-fluid rounded" src="css/Images/image_not_available_template.png">
    }
    else
    {
        <img class="img-fluid rounded" src="data:image/jpeg;base64,@(Convert.ToBase64String(_blogDTO.Cover))">
    }

    <hr>

    <!-- Post Content -->
    @((MarkupString)_blogDTO.HTMLContent)

    <div class="my-2">
        Categories:
        @foreach (var categoryDTO in _blogDTO.CategoryDTOs)
        {
            <a href="category/view/@categoryDTO.ID/@categoryDTO.Name" class="btn-link mx-2">@categoryDTO.Name</a>
        }
    </div>

    <div class="my-2">
        Tags:
        @foreach (var tag in new string[] { "IT", "Tech", "Blazor", "C#", "HTML", "CSS" })
        {
            <a href="#" class="btn btn-light">@tag</a>
        }
    </div>

    <hr>

    <!-- Comments -->
    <CommentSection BlogID="ID" />

    <ConfirmationModal @ref="_confirmationModal"
                       Confirm="(() => _confirmationModal.Hide())"
                       ConfirmOnly="true">
        <ModalBodyTemplate>
            Login to rate
        </ModalBodyTemplate>
    </ConfirmationModal>
}

@code{
    [Parameter] public int ID { get; set; }
    [Parameter] public string Title { get; set; }
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private BlogDTO _blogDTO;
    private ConfirmationModal _confirmationModal;

    protected async override Task OnInitializedAsync()
    {
        await LoadPage();
    }

    private async Task OnRatingSelected(int starNumber)
    {
        var isAuthenticated = (await AuthenticationStateTask).User.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            await BlogRatingClient.CreateAsync(new BlogRatingDTO(_blogDTO.ID, starNumber));
            await LoadPage();
        }
        else
        {
            _confirmationModal.Show();
        }
    }

    private async Task LoadPage()
    {
        _blogDTO = await BlogClient.GetAsync(ID);
    }
}